type AchievementBadge{
  id: String!
  name: String!
  description: String!
<<<<<<< HEAD
  icon_url: String!
  created_at: DateTime!
=======
  iconUrl: String!
  createdAt: DateTime!
>>>>>>> 01096166741546756a9456fc584388602358902c
}

type UserAchievement{
  id: String!
<<<<<<< HEAD
  user_id: String!
  badge_id: String!
  earned_at: DateTime!
  created_at: DateTime!
}

type UpdateMedicalRecordResponse {
  recordId: String!
  message: String!
}

type DeleteMedicalRecordResponse {
  message: String!
=======
  userId: String!
  badgeId: String!
  earnedAt: DateTime!
  createdAt: DateTime!
>>>>>>> 01096166741546756a9456fc584388602358902c
}

type CreateAchievementBadgeResponse {
  badgeId: String!
  message: String!
}

type AchievementBadgeDetail {
  badgeId: String!
  name: String!
  description: String!
  iconUrl: String!
<<<<<<< HEAD
  created_at: DateTime!
=======
  createdAt: DateTime!
>>>>>>> 01096166741546756a9456fc584388602358902c
}

type AwardAchievementResponse {
  userAchievementId: String!
  message: String!
}

type UserAchievementDetail {
  userAchievementId: String!
  badgeId: String!
  earnedAt: DateTime!
}

type UserPointRecord{
  id: String!
<<<<<<< HEAD
  user_id: String!
=======
  userId: String!
>>>>>>> 01096166741546756a9456fc584388602358902c
  pointsEarned: Float!
  reason: String!
  earnedAt: DateTime!
}

type UserPointRecordDetail{
  recordId: String!
  pointsEarned: Float!
  reason: String!
  earnedAt: DateTime!
}

type earnPointsResponse{
  updatedPoints: Float!
  message: String!
}

extend type Query{
  getAchievementBadges: [AchievementBadgeDetail]
  getUserAchievements: [UserAchievementDetail]
  getUserPointRecords: [UserPointRecordDetail]
}

extend type Mutation{
  createAchievementBadge(name: String!, description: String!, iconUrl: String!): CreateAchievementBadgeResponse
  awardAchievement(badgeId: String!): AwardAchievementResponse  
  earnPoints(pointsEarned: Float!, reason:String!) : earnPointsResponse
}