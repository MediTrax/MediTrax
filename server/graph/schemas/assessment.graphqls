type Question{
  questionId: Int!
  question: String!
  questionchoiceType: Int! # ex. 0 = single choice, 1 = multiple choice, 2 = fill in the blank, 3 = fill in the blank with figure etc.
  choices: [String!] # empty if it is fill in the blank
}

type QuestionnaireObject{
  questionnaireId: Int!
  data: [Question!]!
}

input Response{
  questionId: Int!
  choice: String!#数字序号用，隔开
  answer: String
}

type HealthResponse{
  questionId: Int!
  choice: String!#数字序号用，隔开
  answer: String
}

input FilledQuestionnaire{
  questionnaireId: Int!  # 第几套测试题
  responses: [Response!]!
}

type HealthRiskAssessment{
  id: String!
  userId: String!
  questionnaireData: [HealthResponse!]!
  riskLevel: String!
  recommendations: String!
  createdAt: DateTime!
}

type HealthRiskAssessmentDetailResponse {
  assessmentId: String!
  questionnaireData: [HealthResponse!]!
  riskLevel: String!
  recommendations: String!
  createdAt: DateTime!
}

type EvaluateHealthRiskAssessmentResponse {
  assessmentId: String!
  riskLevel: String!
  recommendations: String!
}

extend type Query{
  getHealthRiskAssessment: [HealthRiskAssessmentDetailResponse] # 不做题目能拿到之前的结果
  getHealthRiskAssessmentQuestion: QuestionnaireObject #拿题目
}

extend type Mutation{
  evaluateHealthRiskAssessment(filledQuestionnaire: FilledQuestionnaire!): EvaluateHealthRiskAssessmentResponse #拿结果
}