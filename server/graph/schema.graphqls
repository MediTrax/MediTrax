# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  name: String!
  phone: String
  email: String

  stage: Integer!
  medicines: [Medicine!]!
  health_records: [HealthRecord!]!

  dialysis: Dialysis

  # Future TODO:
  # doc_recommendations: [Recommendation!]!
}

type Medicine{
  name: String!
  remaining: Integer!
  days_remaining: Integer!
  start_time: Date!
  last_taken: DateTime
  next_reminder: DateTime!
  consump_rate: ConsumpRate!
}

type ConsumpRate{
  # whether the medicine is taken multiple times a day, or once every few days
  is_multi_daily: Boolean!
  # if it is taken once every few days, how few
  alt_days: Integer
  # when the reminder should be for those taken once every few days
  day_remind_time: Time
  # if it is taken multiple times a day, how many times
  multi_daily: Integer
  # when reminder times are for those takne multiple times a day (should provide autofill for user)
  remind_times: [Time!]!
}

type HealthRecord{
  date_taken: Date!
  
  specs: record_specs!
}

union record_specs = BloodPressure | BloodTest | UrineTest

type BloodPressure{
  time_taken: Time!
  high: Float
  low: Float
}

type BloodTest{
  # 肌酐
  creatinine: Concentration
  # 尿素
  urea_nitrogen: Concentration
  # 尿酸
  uric_acid: Concentration
  # 碳酸氢根
  bicarbonate: Float
  # 内生肌酐清除率
  creatinine_clearance_rate: Float
  # 胱抑素C
  cystatin_c: Float
  # 视黄醇结合蛋白
  retinol_binding_protein: FLoat
  # 血红蛋白
  hemoglobin: Concentration
  # 电解质
  eletrolytes: Eletrolytes  
}

type UrineTest{
  # 肌酐
  creatinine: Concentration
  # 尿蛋白
  albumin: Concentration
  # 肌酐/尿白蛋白比
  albumin_to_creatine: Float
  # ph
  ph: Float
  # 红细胞
  red_blood_cells: Concentration
  # 白细胞
  white_blood_cells: Concentration
}

type Eletrolytes{
  pottassium: Concentration
  sodium: Concentration
  calcium: Concentration
  phosphate: Concentration
}

type Concentration{
  value: Float!
  unit: String!
}

type Dialysis{
  is_blood_dialysis: Boolean!

  specs: dialysis_specs!
}

union dialysis_specs = Hemodialysis | PeritonealDialysis

# through blood, usually once per week, but may vary
type Hemodialysis{
  interval: Integer!
  start_date: Date!
  last_dialysis: DateTime
  next_dialysis: DateTime
  next_reservation_rem: DateTime!

  reservation_days: Integer
  reservation_time: Time
}

# through abdomen, once per day
type PeritonealDialysis{
  start_date: Date!
  last_dialysis: DateTime
  next_reminder: DateTime!
  dialysis_time: Time!

  # regarding their remaining stockpile of dialysis fluid
  remaining_packs: Integer
  pks_used_per_time: Integer
  days_remaining: Integer
}



type Query {
  todos: [Todo!]!
}

input NewTodo {
  text: String!
  userId: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}
