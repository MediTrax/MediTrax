# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar DateTime
scalar QuestionnaireObject
scalar RecordObject


type User{
  id: String!
  email: String!
  password: String!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  last_login: DateTime!
  status: Int!
  role: String!
}

type HealthRiskAssessment{
  id: String!
  user_id: String!
  questionnaire_data: QuestionnaireObject
  risk_level: Int!
  recommendations: [String!]!
  created_at: DateTime!
}

type Medication{
  id: String!
  name: String!
  dosage: Float!
  unit: String!
  frequency: String!
  inventory: Int!
  user_id: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type MedicationReminder{
  id: String!
  medication_id: String!
  user_id: String!
  reminder_time: DateTime!
  is_taken: Boolean!
  created_at: DateTime!
}

type MedicalRecord{
  id: String!
  user_id: String!
  record_type: String!
  content: RecordObject!
  created_at: DateTime!
  updated_at: DateTime!
}

type FamilyMember{
  id: String!
  user_id: String!
  related_user_id: String!
  relationship: String!
  access_level: Int!
  created_at: DateTime!
}

type AchievementBadge{
  id: String!
  name: String!
  description: String!
  icon_url: String!
  created_at: DateTime!
}

type UserAchievement{
  id: String!
  user_id: String!
  badge_id: String!
  earned_at: DateTime!
  created_at: DateTime!
}

type Query {
  user: User!
}

type PasswordChange {
  id: String!
  user: String!
  token: String!
  createdAt: DateTime!
}

type CreateUserResponse {
  userId: String!
  message: String!
}

type LoginUserResponse {
  userId: String!
  token: String!
  message: String!
}

type UserDetailResponse {
  userId: String!
  email: String!
  name: String!
  role: String!
  createdAt: DateTime!
  lastLogin: DateTime
}

type UpdateUserResponse {
  userId: String!
  message: String!
}

type DeleteUserResponse {
  message: String!
}

type RequestPasswordResetResponse {
  message: String!
}

type ResetPasswordResponse {
  message: String!
}

type HealthRiskAssessmentResponse {
  assessmentId: String!
  riskLevel: String!
  recommendations: String!
}

type HealthRiskAssessmentDetailResponse {
  assessmentId: String!
  questionnaireData: String!
  riskLevel: String!
  recommendations: String!
  createdAt: DateTime!
}

type UpdateHealthRiskAssessmentResponse {
  assessmentId: String!
  riskLevel: String!
  recommendations: String!
}

type AddMedicationResponse {
  medicationId: String!
  message: String!
}

type MedicationDetail {
  medicationId: String!
  name: String!
  dosage: String!
  unit: String!
  frequency: String!
  inventory: Int!
}

type UpdateMedicationResponse {
  medicationId: String!
  message: String!
}

type DeleteMedicationResponse {
  message: String!
}

type CreateMedicationReminderResponse {
  reminderId: String!
  message: String!
}

type UpdateMedicationReminderResponse {
  reminderId: String!
  message: String!
}

type MedicationReminderDetail {
  reminderId: String!
  medicationId: String!
  reminderTime: DateTime!
  isTaken: Boolean!
}

type CreateTreatmentScheduleResponse {
  scheduleId: String!
  message: String!
}

type TreatmentScheduleDetail {
  scheduleId: String!
  treatmentType: String!
  scheduledTime: DateTime!
  location: String!
  notes: String
}

type UpdateTreatmentScheduleResponse {
  scheduleId: String!
  message: String!
}

type DeleteTreatmentScheduleResponse {
  message: String!
}

type AddHealthMetricResponse {
  metricId: String!
  message: String!
}

type HealthMetricDetail {
  metricId: String!
  metricType: String!
  value: Float!
  unit: String!
  recordedAt: DateTime!
}

type UpdateHealthMetricResponse {
  metricId: String!
  message: String!
}

type DeleteHealthMetricResponse {
  message: String!
}

type CreateDietPlanResponse {
  planId: String!
  message: String!
}

type DietPlanDetail {
  planId: String!
  mealType: String!
  foodItems: String!
  calories: Float!
  createdAt: DateTime!
}

type UpdateDietPlanResponse {
  planId: String!
  message: String!
}

type DeleteDietPlanResponse {
  message: String!
}

type AddMedicalRecordResponse {
  recordId: String!
  message: String!
}

type MedicalRecordDetail {
  recordId: String!
  recordType: String!
  content: String!
  createdAt: DateTime!
}

type UpdateMedicalRecordResponse {
  recordId: String!
  message: String!
}

type DeleteMedicalRecordResponse {
  message: String!
}

type AddFamilyMemberResponse {
  memberId: String!
  message: String!
}

type FamilyMemberDetail {
  memberId: String!
  relatedUserId: String!
  relationship: String!
  accessLevel: String!
}

type UpdateFamilyMemberResponse {
  memberId: String!
  message: String!
}

type DeleteFamilyMemberResponse {
  message: String!
}

type CreateAchievementBadgeResponse {
  badgeId: String!
  message: String!
}

type AchievementBadgeDetail {
  badgeId: String!
  name: String!
  description: String!
  iconUrl: String!
}

type AwardAchievementResponse {
  userAchievementId: String!
  message: String!
}

type UserAchievementDetail {
  userAchievementId: String!
  badgeId: String!
  earnedAt: DateTime!
}

type Mutation {
  createUser(email: String!, password: String!, username: String!, role: String!): CreateUserResponse
  loginUser(email: String!, password: String!): LoginUserResponse
  getUser(userId: String!): UserDetailResponse
  updateUser(userId: String!, name: String, email: String, password: String): UpdateUserResponse
  deleteUser(userId: String!): DeleteUserResponse
  requestPasswordReset(email: String!): RequestPasswordResetResponse
  resetPassword(token: String!, newPassword: String!): ResetPasswordResponse
  
  createHealthRiskAssessment(userId: String!, questionnaireData: String!): HealthRiskAssessmentResponse
  getHealthRiskAssessment(userId: String!): HealthRiskAssessmentDetailResponse
  updateHealthRiskAssessment(assessmentId: String!, questionnaireData: String!): UpdateHealthRiskAssessmentResponse
  
  addMedication(userId: String!, name: String!, dosage: String!, unit: String!, frequency: String!, inventory: Int!): AddMedicationResponse
  getMedications(userId: String!): [MedicationDetail]
  updateMedication(medicationId: String!, name: String, dosage: String, unit: String, frequency: String, inventory: Int): UpdateMedicationResponse
  deleteMedication(medicationId: String!): DeleteMedicationResponse
  createMedicationReminder(userId: String!, medicationId: String!, reminderTime: DateTime!): CreateMedicationReminderResponse
  updateMedicationReminder(reminderId: String!, reminderTime: DateTime!, isTaken: Boolean!): UpdateMedicationReminderResponse
  getMedicationReminders(userId: String!): [MedicationReminderDetail]
  
  createTreatmentSchedule(userId: String!, treatmentType: String!, scheduledTime: DateTime!, location: String!, notes: String): CreateTreatmentScheduleResponse
  getTreatmentSchedules(userId: String!): [TreatmentScheduleDetail]
  updateTreatmentSchedule(scheduleId: String!, treatmentType: String, scheduledTime: DateTime, location: String, notes: String): UpdateTreatmentScheduleResponse
  deleteTreatmentSchedule(scheduleId: String!): DeleteTreatmentScheduleResponse
  
  addHealthMetric(userId: String!, metricType: String!, value: Float!, unit: String!): AddHealthMetricResponse
  getHealthMetrics(userId: String!, startDate: DateTime, endDate: DateTime): [HealthMetricDetail]
  updateHealthMetric(metricId: String!, value: Float, unit: String): UpdateHealthMetricResponse
  deleteHealthMetric(metricId: String!): DeleteHealthMetricResponse
  
  createDietPlan(userId: String!, mealType: String!, foodItems: String!, calories: Float!): CreateDietPlanResponse
  getDietPlans(userId: String!): [DietPlanDetail]
  updateDietPlan(planId: String!, mealType: String, foodItems: String, calories: Float): UpdateDietPlanResponse
  deleteDietPlan(planId: String!): DeleteDietPlanResponse
  
  addMedicalRecord(userId: String!, recordType: String!, content: String!): AddMedicalRecordResponse
  getMedicalRecords(userId: String!): [MedicalRecordDetail]
  updateMedicalRecord(recordId: String!, recordType: String, content: String): UpdateMedicalRecordResponse
  deleteMedicalRecord(recordId: String!): DeleteMedicalRecordResponse
  
  addFamilyMember(userId: String!, relatedUserId: String!, relationship: String!, accessLevel: String!): AddFamilyMemberResponse
  getFamilyMembers(userId: String!): [FamilyMemberDetail]
  updateFamilyMember(memberId: String!, relationship: String, accessLevel: String): UpdateFamilyMemberResponse
  deleteFamilyMember(memberId: String!): DeleteFamilyMemberResponse
  
  createAchievementBadge(name: String!, description: String!, iconUrl: String!): CreateAchievementBadgeResponse
  getAchievementBadges: [AchievementBadgeDetail]
  awardAchievement(userId: String!, badgeId: String!): AwardAchievementResponse
  getUserAchievements(userId: String!): [UserAchievementDetail]
}
