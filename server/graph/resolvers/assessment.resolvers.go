package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"meditrax/graph/database"
	middlewares "meditrax/graph/middleware"
	"meditrax/graph/model"
	"meditrax/graph/utils"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

// CreateHealthRiskAssessment is the resolver for the createHealthRiskAssessment field.
func (r *mutationResolver) CreateHealthRiskAssessment(ctx context.Context, questionnaireData string) (*model.HealthRiskAssessmentResponse, error) {
	//panic(fmt.Errorf("not implemented: UpdateHealthRiskAssessment - updateHealthRiskAssessment"))
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}

	riskLevel, recommendations := utils.EvaluateHealthRisk(questionnaireData)

	result, err := database.DB.Query(
		`CREATE ONLY health_risk_assessment:ulid()
	    SET 
			user_id=$user_id,
			questionnaireData=$questionnaireData,
	        riskLevel=$riskLevel,
	        recommendations=$recommendations,
	        createdAt=time::now();`,
		map[string]interface{}{
			"questionnaireData": questionnaireData,
			"riskLevel":         riskLevel,
			"recommendations":   recommendations,
			"user_id":           user.ID,
		},
	)
	if err != nil {
		return nil, err
	}

	newAssessment, err := surrealdb.SmartUnmarshal[model.HealthRiskAssessment](result, nil)
	if err != nil {
		return nil, err
	}

	response := &model.HealthRiskAssessmentResponse{
		AssessmentID:    newAssessment.ID,
		RiskLevel:       riskLevel,
		Recommendations: recommendations,
	}

	return response, nil
}

// UpdateHealthRiskAssessment is the resolver for the updateHealthRiskAssessment field.
func (r *mutationResolver) UpdateHealthRiskAssessment(ctx context.Context, assessmentID string, questionnaireData string) (*model.UpdateHealthRiskAssessmentResponse, error) {
	//panic(fmt.Errorf("not implemented: UpdateHealthRiskAssessment - updateHealthRiskAssessment"))
	//check if they are logged in correctly
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}
	// check if id is legal
	if !utils.MatchID(assessmentID, "health_risk_assessment") {
		return nil, fmt.Errorf("illegal assessment id")
	}

	// 验证评估记录存在且属于当前用户
	result, err := database.DB.Query(
		`SELECT * FROM health_risk_assessment WHERE id=$id AND user_id=$user_id;`,
		map[string]interface{}{
			"id":      assessmentID,
			"user_id": user.ID,
		},
	)
	if err != nil {
		return nil, err
	}

	existingAssessments, err := surrealdb.SmartUnmarshal[[]*model.HealthRiskAssessment](result, nil)
	if err != nil {
		return nil, err
	}

	if len(existingAssessments) == 0 {
		return nil, fmt.Errorf("assessment not found or access denied")
	}
	// TODO:计算新的健康风险等级和推荐措施（假设基于问卷数据进行分析）
	riskLevel, recommendations := utils.EvaluateHealthRisk(questionnaireData)

	// 更新评估记录
	result, err = database.DB.Query(
		`UPDATE $id 
        SET questionnaire_data=$questionnaire_data,
            risk_level=$risk_level,
            recommendations=$recommendations,
            updated_at=time::now()
        WHERE user_id=$user_id;`,
		map[string]interface{}{
			"id":                 assessmentID,
			"questionnaire_data": questionnaireData,
			"risk_level":         riskLevel,
			"recommendations":    recommendations,
			"user_id":            user.ID,
		},
	)
	if err != nil {
		return nil, err
	}

	updatedAssessments, err := surrealdb.SmartUnmarshal[[]model.HealthRiskAssessment](result, nil)
	if err != nil {
		return nil, err
	}

	if len(updatedAssessments) == 0 {
		return nil, fmt.Errorf("failed to update assessment")
	}

	response := &model.UpdateHealthRiskAssessmentResponse{
		AssessmentID:    updatedAssessments[0].ID,
		RiskLevel:       riskLevel,
		Recommendations: recommendations,
	}

	return response, nil
}

// GetHealthRiskAssessment is the resolver for the getHealthRiskAssessment field.
func (r *queryResolver) GetHealthRiskAssessment(ctx context.Context) (*model.HealthRiskAssessmentDetailResponse, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}
	// 查询最新的健康风险评估（假设根据创建时间或其他条件进行排序）
	result, err := database.DB.Query(`SELECT * FROM health_risk_assessment ORDER BY createdAt DESC LIMIT 1;`, nil)
	if err != nil {
		return nil, err
	}

	assessment, err := surrealdb.SmartUnmarshal[model.HealthRiskAssessmentDetailResponse](result, nil)
	if err != nil {
		return nil, err
	}

	return &assessment, nil
}
