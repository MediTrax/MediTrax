package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"meditrax/graph/database"
	middlewares "meditrax/graph/middleware"
	"meditrax/graph/model"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

// GetActivityLog is the resolver for the getActivityLog field.
func (r *queryResolver) GetActivityLog(ctx context.Context) ([]*model.ActivityLogDetail, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}

	// query for all the medications associated with the user
	result, err := database.DB.Query(
		`SELECT * FROM activity_log WHERE userId = $userId;`,
		map[string]interface{}{
			"userId": user.ID,
		},
	)
	if err != nil {
		return nil, err
	}

	activities, err := surrealdb.SmartUnmarshal[[]model.ActivityLog](result, nil)
	if err != nil {
		return nil, err
	}

	var activityDetails []*model.ActivityLogDetail
	for _, activity := range activities {
		activityDetail := &model.ActivityLogDetail{
			LogID:         activity.ID,
			ActivityType:  activity.ActivityType,
			Description:   activity.Description,
			ChangedObject: activity.ChangedObject,
			ChangedField:  activity.ChangedField,
			From:          activity.From,
			To:            activity.To,
			Timestamp:     activity.Timestamp,
		}
		activityDetails = append(activityDetails, activityDetail)
	}

	return activityDetails, nil
}
