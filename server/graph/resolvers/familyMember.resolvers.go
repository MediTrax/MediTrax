package graph

import (
	"context"
	"fmt"
	"meditrax/graph/database"
	middlewares "meditrax/graph/middleware"
	"meditrax/graph/model"
	"meditrax/graph/utils"

	surrealdb "github.com/surrealdb/surrealdb.go"
)

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

// AddFamilyMember is the resolver for the addFamilyMember field.
func (r *mutationResolver) AddFamilyMember(ctx context.Context, memberPhoneNumber string, relationship string, accessLevel int) (*model.AddFamilyMemberResponse, error) {
	panic(fmt.Errorf("not implemented: GetHealthRiskAssessment - getHealthRiskAssessment"))
	// TODO
	// user := middlewares.ForContext(ctx)
	// if user == nil {
	// 	return nil, fmt.Errorf("access denied")
	// }

	// result, err := database.DB.Query(
	// 	`SELECT * FROM user WHERE phoneNumber=$phoneNumber LIMIT 1;`,
	// 	map[string]interface{}{
	// 		"phoneNumber": memberPhoneNumber,
	// 	},
	// )
	// if err != nil {
	// 	return nil, err
	// }
	// related_users, err := surrealdb.SmartUnmarshal[[]model.User](result, nil)
	// if err != nil {
	// 	return nil, err
	// }
	// if len(related_users) < 1 {
	// 	return nil, fmt.Errorf("error, can not find user with given phone number")
	// }
	// family := related_users[0]

	// // query database for family member entries with the same member
	// result, err = database.DB.Query(
	// 	`SELECT * FROM family_member WHERE userId=$userId AND patient_userId=$patient_userId;`,
	// 	map[string]interface{}{
	// 		"userId":         family.ID,
	// 		"patient_userId": user.ID,
	// 	},
	// )
	// if err != nil {
	// 	return nil, err
	// }
	// family_members, err := surrealdb.SmartUnmarshal[[]*model.FamilyMember](result, nil)
	// if err != nil {
	// 	return nil, err
	// }
	// if len(family_members) > 0 {
	// 	return nil, fmt.Errorf("family member with same phone number has already been added for the user")
	// }

	// // finally, send the create family member query
	// result, err = database.DB.Query(
	// 	`CREATE ONLY family_member:ulid()
	// 	SET userId=$userId,
	// 	patient_userId=$patient_userId,
	// 	relationship=$relationship,
	// 	accessLevel=$accessLevel,
	// 	createdAt=time::now()
	// 	`,
	// 	map[string]interface{}{
	// 		"userId":         family.ID,
	// 		"patient_userId": user.ID,
	// 		"relationship":   relationship,
	// 		"accessLevel":    accessLevel,
	// 	},
	// )
	// if err != nil {
	// 	return nil, err
	// }

	// // unmarshal the results of the CREATE query
	// member, err := surrealdb.SmartUnmarshal[model.FamilyMember](result, nil)
	// if err != nil {
	// 	return nil, err
	// }

	// // create response
	// response := &model.AddFamilyMemberResponse{
	// 	MemberID: member.ID,
	// 	Message:  "new family member added successfully",
	// }
	// return response, nil
}

// DeleteFamilyMember is the resolver for the deleteFamilyMember field.
func (r *mutationResolver) DeleteFamilyMember(ctx context.Context, memberID string) (*model.DeleteFamilyMemberResponse, error) {
	panic(fmt.Errorf("not implemented: GetHealthRiskAssessment - getHealthRiskAssessment"))
	// user := middlewares.ForContext(ctx)
	// if user == nil {
	// 	return nil, fmt.Errorf("access denied")
	// }

	// // check legality of the provided id
	// if !utils.MatchID(memberID, "family_member") {
	// 	return nil, fmt.Errorf("illegal family member id")
	// }

	// // Execute the query
	// result, err := database.DB.Query(
	// 	`DELETE $id WHERE patient_userId=$userId RETURN BEFORE;`,
	// 	map[string]interface{}{
	// 		"id":     memberID,
	// 		"userId": user.ID,
	// 	},
	// )
	// if err != nil {
	// 	return nil, err // Return the error if the query fails
	// }

	// // unmarshal results and check for errors
	// results, err := surrealdb.SmartUnmarshal[[]model.FamilyMember](result, nil)
	// if err != nil {
	// 	return nil, err
	// }
	// if len(results) == 0 {
	// 	return nil, fmt.Errorf("invalid id, no associated family member object found")
	// }

	// // create response
	// response := &model.DeleteFamilyMemberResponse{
	// 	Message: fmt.Sprintf("Family member %s with related member id %s deleted successfully", results[0].ID, results[0].UserID),
	// }

	// // Return the response with the medication ID and a success message
	// return response, nil
}

// UpdateFamilyMember is the resolver for the updateFamilyMember field.
func (r *mutationResolver) UpdateFamilyMember(ctx context.Context, memberID string, relationship *string, accessLevel *string) (*model.UpdateFamilyMemberResponse, error) {
	panic(fmt.Errorf("not implemented: GetHealthRiskAssessment - getHealthRiskAssessment"))
	// user := middlewares.ForContext(ctx)
	// if user == nil {
	// 	return nil, fmt.Errorf("access denied")
	// }

	// // check legality of the member id
	// if !utils.MatchID(memberID, "family_member") {
	// 	return nil, fmt.Errorf("illegal member id")
	// }

	// // Initialize a map to hold the update values
	// updateValues := map[string]interface{}{"id": memberID, "userId": user.ID}

	// // Prepare the fields to be updated
	// updateFields := []string{}
	// if relationship != nil {
	// 	updateValues["relationship"] = *relationship
	// 	updateFields = append(updateFields, "relationship = $relationship")
	// }
	// if accessLevel != nil {
	// 	updateValues["accessLevel"] = *accessLevel
	// 	updateFields = append(updateFields, "accessLevel = $accessLevel")
	// }

	// // Construct the final query with the medicationID in quotes
	// query := fmt.Sprintf("UPDATE $id SET %s WHERE userId=$userId;", strings.Join(updateFields, ", "))

	// // send the UPDATE query
	// result, err := database.DB.Query(query, updateValues)
	// if err != nil {
	// 	return nil, err
	// }

	// // unmarshal the results and check for errors
	// results, err := surrealdb.SmartUnmarshal[[]model.FamilyMember](result, nil)
	// if err != nil {
	// 	return nil, err
	// }
	// if len(results) == 0 {
	// 	return nil, fmt.Errorf("invalid id. no associated family member object found")
	// }

	// // create response
	// response := &model.UpdateFamilyMemberResponse{
	// 	MemberID: results[0].ID,
	// 	Message:  "Family member updated successfully",
	// }

	// // Return the response with the medication ID and a success message
	// return response, nil
}

// GetFamilyMembers is the resolver for the getFamilyMembers field.
func (r *queryResolver) GetFamilyMembers(ctx context.Context) ([]*model.FamilyMemberDetail, error) {
	panic(fmt.Errorf("not implemented: GetHealthRiskAssessment - getHealthRiskAssessment"))
	// user := middlewares.ForContext(ctx)
	// if user == nil {
	// 	return nil, fmt.Errorf("access denied")
	// }

	// // Fetch family members (with shared access) of the user
	// result, err := database.DB.Query(`SELECT * FROM family_member WHERE patient_userId=$userID;`, map[string]interface{}{
	// 	"userID": user.ID,
	// })
	// if err != nil {
	// 	return nil, err
	// }

	// members, err := surrealdb.SmartUnmarshal[[]*model.FamilyMember](result, nil)
	// if err != nil {
	// 	return nil, err
	// }

	// var member_details []*model.FamilyMemberDetail
	// for _, member := range members {
	// 	member_user, err := utils.GetUserByID(member.UserID)
	// 	// Error handling, could change it so that this particular member is skipped.
	// 	if err != nil {
	// 		return nil, fmt.Errorf("error getting family member information: %e", err)
	// 	}
	// 	memberDetail := &model.FamilyMemberDetail{
	// 		MemberID:     member.ID,
	// 		FamilyID:     member_user.ID,
	// 		Name:         member_user.Name,
	// 		PhoneNumber:  member_user.PhoneNumber,
	// 		Relationship: member.Relationship,
	// 		AccessLevel:  member.AccessLevel,
	// 	}
	// 	member_details = append(member_details, memberDetail)
	// }

	// return member_details, nil
}

// GetRelatedPatients is the resolver for the getRelatedPatients field.
func (r *queryResolver) GetRelatedPatients(ctx context.Context) ([]*model.PatientDetail, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}

	// Fetch family members (with shared access) of the user
	result, err := database.DB.Query(`SELECT * FROM family_member WHERE userId=$userID;`, map[string]interface{}{
		"userID": user.ID,
	})
	if err != nil {
		return nil, err
	}

	members, err := surrealdb.SmartUnmarshal[[]*model.FamilyMember](result, nil)
	if err != nil {
		return nil, err
	}

	var patient_details []*model.PatientDetail
	for _, member := range members {
		patient, err := utils.GetUserByID(member.PatientUserID)
		// Error handling, could change it so that this particular patient is skipped.
		if err != nil {
			return nil, fmt.Errorf("error getting patient information: %e", err)
		}
		patientDetail := &model.PatientDetail{
			PatientID:    patient.ID,
			Name:         patient.Name,
			PhoneNumber:  patient.PhoneNumber,
			Relationship: member.Relationship,
			AccessLevel:  member.AccessLevel,
		}
		patient_details = append(patient_details, patientDetail)
	}
	return patient_details, nil
}

// GetPatientMedicalRecords is the resolver for the getPatientMedicalRecords field.
func (r *queryResolver) GetPatientMedicalRecords(ctx context.Context, patientID string) ([]*model.MedicalRecordDetail, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}
	if !utils.IsFamilyMember(user.ID, patientID) {
		return nil, fmt.Errorf("access denied, user is not a family member of patient")
	}

	user, err := utils.GetUserByID(patientID)
	if err != nil {
		return nil, fmt.Errorf("error getting patient information: %e", err)
	}

	return utils.GetMedicalRecords(*user)
}

// GetPatientTreatmentSchedule is the resolver for the getPatientTreatmentSchedule field.
func (r *queryResolver) GetPatientTreatmentSchedule(ctx context.Context, patientID string) ([]*model.TreatmentScheduleDetail, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}
	if !utils.IsFamilyMember(user.ID, patientID) {
		return nil, fmt.Errorf("access denied, user is not a family member of patient")
	}

	user, err := utils.GetUserByID(patientID)
	if err != nil {
		return nil, fmt.Errorf("error getting patient information: %e", err)
	}

	return utils.GetTreatmentSchedules(*user)
}

// GetPatientMedications is the resolver for the getPatientMedications field.
func (r *queryResolver) GetPatientMedications(ctx context.Context, patientID string) ([]*model.MedicationDetail, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}
	if !utils.IsFamilyMember(user.ID, patientID) {
		return nil, fmt.Errorf("access denied, user is not a family member of patient")
	}

	user, err := utils.GetUserByID(patientID)
	if err != nil {
		return nil, fmt.Errorf("error getting patient information: %e", err)
	}

	return utils.GetMedications(*user)
}

// GetPatientHealthMetrics is the resolver for the getPatientHealthMetrics field.
func (r *queryResolver) GetPatientHealthMetrics(ctx context.Context, patientID string, startDate *string, endDate *string, metricType *string) ([]*model.HealthMetricDetail, error) {
	user := middlewares.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}
	if !utils.IsFamilyMember(user.ID, patientID) {
		return nil, fmt.Errorf("access denied, user is not a family member of patient")
	}

	user, err := utils.GetUserByID(patientID)
	if err != nil {
		return nil, fmt.Errorf("error getting patient information: %e", err)
	}

	return utils.GetHealthMetrics(*user, startDate, endDate, metricType)
}
