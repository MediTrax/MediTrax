// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type AchievementBadge struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	IconURL     string    `json:"iconUrl"`
	CreatedAt   time.Time `json:"createdAt"`
}

// Detailed information about an achievement badge.
type AchievementBadgeDetail struct {
	BadgeID     string    `json:"badgeId"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	IconURL     string    `json:"iconUrl"`
	CreatedAt   time.Time `json:"createdAt"`
}

// Represents an activity log entry for a user.
type ActivityLog struct {
	ID            string    `json:"id"`
	UserID        string    `json:"userId"`
	ActivityType  string    `json:"activityType"`
	Description   string    `json:"description"`
	ChangedObject string    `json:"changedObject"`
	ChangedField  string    `json:"changedField"`
	From          string    `json:"from"`
	To            string    `json:"to"`
	Timestamp     time.Time `json:"timestamp"`
}

// Detailed information about an activity log entry.
type ActivityLogDetail struct {
	LogID         string    `json:"logId"`
	ActivityType  string    `json:"activityType"`
	Description   string    `json:"description"`
	ChangedObject string    `json:"changedObject"`
	ChangedField  string    `json:"changedField"`
	From          string    `json:"from"`
	To            string    `json:"to"`
	Timestamp     time.Time `json:"timestamp"`
}

type AddHealthMetricResponse struct {
	// The ID of the newly added health metric.
	MetricID string `json:"metricId"`
	// A message indicating the result of the addition operation.
	Message string `json:"message"`
}

// Response type for adding a medical record.
type AddMedicalRecordResponse struct {
	// The ID of the newly added medical record.
	RecordID string `json:"recordId"`
	// A message indicating the result of the addition operation.
	Message string `json:"message"`
}

// Response type for adding a medication.
type AddMedicationResponse struct {
	// The ID of the newly added medication.
	MedicationID string `json:"medicationId"`
	// A message indicating the result of the addition operation.
	Message string `json:"message"`
}

// Response type for awarding an achievement to a user.
type AwardAchievementResponse struct {
	// The ID of the user achievement that was awarded.
	UserAchievementID string `json:"userAchievementId"`
	// A message indicating the result of the award operation.
	Message string `json:"message"`
}

// Response type for creating an achievement badge.
type CreateAchievementBadgeResponse struct {
	// The ID of the newly created achievement badge.
	BadgeID string `json:"badgeId"`
	// A message indicating the result of the creation operation.
	Message string `json:"message"`
}

// Response type for creating a medication reminder.
type CreateMedicationReminderResponse struct {
	// The ID of the newly created medication reminder.
	ReminderID string `json:"reminderId"`
	// A message indicating the result of the creation operation.
	Message string `json:"message"`
}

// Response type for creating a treatment schedule.
type CreateTreatmentScheduleResponse struct {
	// The ID of the newly created treatment schedule.
	ScheduleID string `json:"scheduleId"`
	// A message indicating the result of the creation operation.
	Message string `json:"message"`
}

// Response type for deleting a health metric.
type DeleteHealthMetricResponse struct {
	// A message indicating the result of the deletion operation.
	Message string `json:"message"`
}

// Response type for deleting a medical record.
type DeleteMedicalRecordResponse struct {
	// A message indicating the result of the deletion operation.
	Message string `json:"message"`
}

// Response type for deleting a medication reminder.
type DeleteMedicationReminderResponse struct {
	// A message indicating the result of the deletion operation.
	Message string `json:"message"`
}

// Response type for deleting a medication.
type DeleteMedicationResponse struct {
	// A message indicating the result of the deletion operation.
	Message string `json:"message"`
}

// Response type for deleting a treatment schedule.
type DeleteTreatmentScheduleResponse struct {
	// A message indicating the result of the deletion operation.
	Message string `json:"message"`
}

// Response type for deleting a user.
type DeleteUserResponse struct {
	// A message indicating the result of the deletion operation.
	Message string `json:"message"`
}

// Response type for evaluating a health risk assessment.
type EvaluateHealthRiskAssessmentResponse struct {
	// The ID of the health risk assessment.
	AssessmentID string `json:"assessmentId"`
	// The risk level determined from the assessment.
	RiskLevel string `json:"riskLevel"`
	// Recommendations based on the assessment results.
	Recommendations string `json:"recommendations"`
}

type FilledQuestionnaire struct {
	// The ID of the questionnaire being filled.
	QuestionnaireID int `json:"questionnaireId"`
	// The list of responses to the questionnaire.
	Responses []*Response `json:"responses"`
}

// Represents a recommendation for a food item.
type FoodRecommendation struct {
	// The name of the recommended food item.
	Name string `json:"name"`
}

// Represents the specification of a food item.
type FoodSpec struct {
	// The name of the food specification.
	Name string `json:"name"`
	// The value of the food specification.
	Value float64 `json:"value"`
	// The unit of measurement for the food specification.
	Unit string `json:"unit"`
	// A measure of how high the specification value is compared to a standard.
	HowHigh float64 `json:"howHigh"`
}

// Represents a collection of food specifications.
type FoodSpecs struct {
	// The list of food specifications.
	Specs []*FoodSpec `json:"specs"`
	// A measure of how recommended the food item is.
	HowRecommend float64 `json:"howRecommend"`
}

// Represents a health metric recorded for a user.
type HealthMetric struct {
	ID         string    `json:"id"`
	UserID     string    `json:"userId"`
	MetricType string    `json:"metricType"`
	Value      float64   `json:"value"`
	Unit       string    `json:"unit"`
	RecordedAt time.Time `json:"recordedAt"`
	CreatedAt  time.Time `json:"createdAt"`
}

// Detailed information about a health metric.
type HealthMetricDetail struct {
	MetricID   string    `json:"metricId"`
	MetricType string    `json:"metricType"`
	Value      float64   `json:"value"`
	Unit       string    `json:"unit"`
	RecordedAt time.Time `json:"recordedAt"`
}

// Represents a health response in a risk assessment.
type HealthResponse struct {
	// The ID of the question being answered.
	QuestionID int `json:"questionId"`
	// The choice selected for the question.
	Choice string `json:"choice"`
	// The answer provided for the question, if applicable.
	Answer *string `json:"answer,omitempty"`
}

// Represents a health risk assessment for a user.
type HealthRiskAssessment struct {
	// The unique identifier of the health risk assessment.
	ID string `json:"id"`
	// The ID of the user who completed the assessment.
	UserID string `json:"userId"`
	// The data from the completed questionnaire.
	QuestionnaireData []*HealthResponse `json:"questionnaireData"`
	RiskLevel         string            `json:"riskLevel"`
	Recommendations   string            `json:"recommendations"`
	CreatedAt         time.Time         `json:"createdAt"`
}

// Detailed response for a health risk assessment.
type HealthRiskAssessmentDetailResponse struct {
	// The ID of the health risk assessment.
	AssessmentID string `json:"assessmentId"`
	// The data from the completed questionnaire.
	QuestionnaireData []*HealthResponse `json:"questionnaireData"`
	RiskLevel         string            `json:"riskLevel"`
	Recommendations   string            `json:"recommendations"`
	CreatedAt         time.Time         `json:"createdAt"`
}

// Response type for logging in a user.
type LoginUserResponse struct {
	// The ID of the logged-in user.
	UserID string `json:"userId"`
	// The token associated with the logged-in user.
	Token *Token `json:"token"`
	// A message indicating the result of the login operation.
	Message string `json:"message"`
}

// Represents a medical record for a user.
type MedicalRecord struct {
	ID         string    `json:"id"`
	UserID     string    `json:"userId"`
	RecordType string    `json:"recordType"`
	Content    string    `json:"content"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

// Detailed information about a medical record.
type MedicalRecordDetail struct {
	RecordID   string    `json:"recordId"`
	RecordType string    `json:"recordType"`
	Content    string    `json:"content"`
	CreatedAt  time.Time `json:"createdAt"`
}

// Represents a medication prescribed to a user.
type Medication struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Dosage    float64   `json:"dosage"`
	Unit      string    `json:"unit"`
	Frequency string    `json:"frequency"`
	Inventory float64   `json:"inventory"`
	UserID    string    `json:"userId"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// Detailed information about a medication.
type MedicationDetail struct {
	// The ID of the medication.
	MedicationID string `json:"medicationId"`
	// The name of the medication.
	Name string `json:"name"`
	// The dosage of the medication.
	Dosage float64 `json:"dosage"`
	// The unit of measurement for the dosage.
	Unit string `json:"unit"`
	// The frequency at which the medication should be taken.
	Frequency string `json:"frequency"`
	// The inventory count of the medication.
	Inventory float64 `json:"inventory"`
}

// Represents a reminder for taking a medication.
type MedicationReminder struct {
	ID           string    `json:"id"`
	MedicationID string    `json:"medicationId"`
	UserID       string    `json:"userId"`
	ReminderTime time.Time `json:"reminderTime"`
	IsTaken      bool      `json:"isTaken"`
	CreatedAt    time.Time `json:"createdAt"`
}

// Detailed information about a medication reminder.
type MedicationReminderDetail struct {
	ReminderID   string    `json:"reminderId"`
	MedicationID string    `json:"medicationId"`
	ReminderTime time.Time `json:"reminderTime"`
	IsTaken      bool      `json:"isTaken"`
}

type Mutation struct {
}

// Represents a password change request.
type PasswordChange struct {
	ID        string    `json:"id"`
	User      string    `json:"user"`
	ResetCode string    `json:"resetCode"`
	CreatedAt time.Time `json:"createdAt"`
}

type ProfileDetail struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	PhoneNumber string    `json:"phoneNumber"`
	Role        string    `json:"role"`
	CreatedAt   time.Time `json:"createdAt"`
}

type Query struct {
}

// Represents a question in a health risk assessment questionnaire.
type Question struct {
	// The unique identifier of the question.
	QuestionID int `json:"questionId"`
	// The text of the question.
	Question string `json:"question"`
	// The type of choice available for the question (e.g., single choice, multiple choice).
	QuestionType int `json:"questionType"`
	// The list of choices available for the question.
	Choices []string `json:"choices,omitempty"`
}

// Represents a questionnaire object containing multiple questions.
type QuestionnaireObject struct {
	// The unique identifier of the questionnaire.
	QuestionnaireID int `json:"questionnaireId"`
	// The list of questions in the questionnaire.
	Data []*Question `json:"data"`
}

// Represents a record object containing data.
type RecordObject struct {
	// The data contained in the record object.
	Data string `json:"data"`
}

// Response type for requesting a password reset.
type RequestPasswordResetResponse struct {
	// A message indicating the result of the password reset request.
	Message string `json:"message"`
}

// Response type for resetting a password.
type ResetPasswordResponse struct {
	// A message indicating the result of the password reset operation.
	Message string `json:"message"`
}

// Input type for a response to a questionnaire.
type Response struct {
	// The ID of the question being answered.
	QuestionID int `json:"questionId"`
	// The choice selected for the question.
	Choice string `json:"choice"`
	// The answer provided for the question, if applicable.
	Answer *string `json:"answer,omitempty"`
}

// Response type for sharing a profile.
type ShareProfileResponse struct {
	// A message indicating the result of the profile sharing operation.
	Message string `json:"message"`
}

// Response type for taking a medication.
type TakeMedicationResponse struct {
	// A message indicating the result of the medication taking operation.
	Message string `json:"message"`
}

// Represents a token for user authentication.
type Token struct {
	ID                 string    `json:"id"`
	User               string    `json:"user"`
	AccessToken        string    `json:"accessToken"`
	RefreshToken       string    `json:"refreshToken"`
	AccessTokenExpiry  time.Time `json:"accessTokenExpiry"`
	RefreshTokenExpiry time.Time `json:"refreshTokenExpiry"`
	Device             string    `json:"device"`
	CreatedAt          time.Time `json:"createdAt"`
	UpdatedAt          time.Time `json:"updatedAt"`
}

// Represents a treatment schedule for a user.
type TreatmentSchedule struct {
	ID            string    `json:"id"`
	UserID        string    `json:"userId"`
	TreatmentType string    `json:"treatmentType"`
	ScheduledTime time.Time `json:"scheduledTime"`
	Location      string    `json:"location"`
	Notes         *string   `json:"notes,omitempty"`
}

// Detailed information about a treatment schedule.
type TreatmentScheduleDetail struct {
	ScheduleID    string    `json:"scheduleId"`
	TreatmentType string    `json:"treatmentType"`
	ScheduledTime time.Time `json:"scheduledTime"`
	Location      string    `json:"location"`
	Notes         *string   `json:"notes,omitempty"`
}

// Response type for unsharing a profile.
type UnshareProfileResponse struct {
	// A message indicating the result of the profile unsharing operation.
	Message string `json:"message"`
}

type UpdateHealthMetricResponse struct {
	// The ID of the updated health metric.
	MetricID string `json:"metricId"`
	// A message indicating the result of the update operation.
	Message string `json:"message"`
}

// Response type for updating a medical record.
type UpdateMedicalRecordResponse struct {
	// The ID of the updated medical record.
	RecordID string `json:"recordId"`
	// A message indicating the result of the update operation.
	Message string `json:"message"`
}

// Response type for updating a medication reminder.
type UpdateMedicationReminderResponse struct {
	// The ID of the updated medication reminder.
	ReminderID string `json:"reminderId"`
	// A message indicating the result of the update operation.
	Message string `json:"message"`
}

// Response type for updating a medication.
type UpdateMedicationResponse struct {
	// The ID of the updated medication.
	MedicationID string `json:"medicationId"`
	// A message indicating the result of the update operation.
	Message string `json:"message"`
}

// Response type for updating a treatment schedule.
type UpdateTreatmentScheduleResponse struct {
	// The ID of the updated treatment schedule.
	ScheduleID string `json:"scheduleId"`
	// A message indicating the result of the update operation.
	Message string `json:"message"`
}

// Response type for updating a user.
type UpdateUserResponse struct {
	// The ID of the updated user.
	UserID string `json:"userId"`
	// A message indicating the result of the update operation.
	Message string `json:"message"`
}

// Represents a user in the system.
type User struct {
	ID          string    `json:"id"`
	PhoneNumber string    `json:"phoneNumber"`
	Password    string    `json:"password"`
	Name        string    `json:"name"`
	Points      float64   `json:"points"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	LastLogin   time.Time `json:"lastLogin"`
	Status      int       `json:"status"`
	Role        string    `json:"role"`
}

// Represents a user's achievement, linking a user to a badge.
type UserAchievement struct {
	ID        string    `json:"id"`
	UserID    string    `json:"userId"`
	BadgeID   string    `json:"badgeId"`
	EarnedAt  time.Time `json:"earnedAt"`
	CreatedAt time.Time `json:"createdAt"`
}

// Detailed information about a user's achievement.
type UserAchievementDetail struct {
	UserAchievementID string    `json:"userAchievementId"`
	BadgeID           string    `json:"badgeId"`
	EarnedAt          time.Time `json:"earnedAt"`
}

// Detailed information about a user.
type UserDetailResponse struct {
	UserID      string     `json:"userId"`
	PhoneNumber string     `json:"phoneNumber"`
	Name        string     `json:"name"`
	Points      float64    `json:"points"`
	Role        string     `json:"role"`
	CreatedAt   time.Time  `json:"createdAt"`
	LastLogin   *time.Time `json:"lastLogin,omitempty"`
}

// Represents a record of points earned by a user.
type UserPointRecord struct {
	ID           string    `json:"id"`
	UserID       string    `json:"userId"`
	PointsEarned float64   `json:"pointsEarned"`
	Reason       string    `json:"reason"`
	EarnedAt     time.Time `json:"earnedAt"`
}

// Detailed information about a user's point record.
type UserPointRecordDetail struct {
	RecordID     string    `json:"recordId"`
	PointsEarned float64   `json:"pointsEarned"`
	Reason       string    `json:"reason"`
	EarnedAt     time.Time `json:"earnedAt"`
}

// Response type for earning points.
type EarnPointsResponse struct {
	// The updated total points of the user.
	UpdatedPoints float64 `json:"updatedPoints"`
	// A message indicating the result of the points earning operation.
	Message string `json:"message"`
}
